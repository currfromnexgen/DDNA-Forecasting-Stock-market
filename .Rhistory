}
mean.garch<-mean(forecast.grach)
sigma.garch<-sd(forecast.grach)
mean.nnetar
sigma.nnetar
alpha<-seq(from=0.05, to = 1, by= 0.05)
l<-length(alpha)
lcl.nnetar<-rep(0, length(alpha))
ucl.nnetar<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.nnetar[j]<-mean.nnetar-z*sigma.nnetar/sqrt(50)
ucl.nnetar[j]<-mean.nnetar+z*sigma.nnetar/sqrt(50)
}
lcl.garch<-rep(0, length(alpha))
ucl.garch<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.garch[j]<-mean.garch-z*sigma.garch/sqrt(50)
ucl.garch[j]<-mean.garch+z*sigma.garch/sqrt(50)
}
pdf("SP500D16alphacuts.pdf", width=4, height=5)
plot(lcl.nnetar, alpha, type="l", xlim=c(0.009, 0.0135), col="red")
points(lcl.nnetar, alpha, pch="*", col="red")
lines(ucl.nnetar, alpha, col="blue")
points(ucl.nnetar,alpha, pch="*", col="blue")
# lines(ucl.garch, alpha, col="yellow")
# points(ucl.garch,alpha, pch="*", col="yellow")
# lines(lcl.garch, alpha, col="green")
# points(lcl.garch,alpha, pch="*", col="green")
graphics.off()
par(mfrow=c(2,1))
plot(stock.garch.norm, which=9)
qqplot(sort(as.numeric(e)), qt(grid,df=4.62),
main="t-plot, df=4.62",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(qt(c(.25,.75),df=4.62)~quantile(e,c(.25,.75))))
#
graphics.off()
par(mfrow=c(2,1))
plot(stock.garch.norm, which=9)
qqplot(sort(as.numeric(e)), qt(grid,df=4.62),
main="t-plot, df=4.62",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(qt(c(.25,.75),df=4.62)~quantile(e,c(.25,.75))))
#
graphics.off()
rm(list=ls())
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.stat.sfu.ca/"
options(repos=r)})
# Set a vector of strings: package names to use (and install, if necessary)
pkg_list = c('PerformanceAnalytics', 'quantmod', 'rugarch','FinTS','car','moments','fGarch', 'readxl', 'xts', 'MASS', 'forecast', 'tseries', 'xtable', 'ggplot2')
# ensure existing required packages are up to date:
update.packages(ask=FALSE, oldPkgs=pkg_list)
# Install packages if needed
for (pkg in pkg_list)
{
# Try loading the library.
if ( ! library(pkg, logical.return=TRUE, character.only=TRUE) )
{
# If the library cannot be loaded, install it; then load.
install.packages(pkg)
library(pkg, character.only=TRUE)
}
}
library(ggplot2)
library(tseries)
library(rugarch)
library(forecast)
library(xts)
library(fOptions)
data=as.xts(get.hist.quote(instrument = "^gspc",start = "2014-12-08",end = "2018-11-28",quote="AdjClose"))
data<-data$Adjusted
y1=na.omit(diff(log(data)))  ##compute returns
pdf("SP500_abs_return.pdf",width=6,height=5)
time<-length(y1)
time<-seq(1:time)
lwdfact=6
plot(time,abs(y1), type='l', main="gspc")
mod = loess(abs(y1)~time,span=.25)
lines(time, mod$fitted, lwd=lwdfact,col=2)
graphics.off()
y1<-as.ts(y1)
pdf("SP500_acf and pacf.pdf", width=6, height=5)
par(mfrow=c(3, 2))
acf(y1, main="original series")
pacf(y1, main="original series")
y2<-y1^2
acf(y2, main="sequared series")
pacf(y2, main="sequared series")
y1.abs<-abs(y1)
acf(y1.abs, main="abs series")
pacf(y1.abs, main="abs series")
graphics.off()
######################################################################
# mean.abs<-mean(y1.abs)
sd.y1<-sd(y1)
# rho.hat<-mean.abs/sd.y1
#############################################################
################################## fitting rugarch################################################################
garch.norm=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="norm")
stock.garch.norm=ugarchfit(data=y1, spec=garch.norm)
show(stock.garch.norm)
pdf("sp500. norm-garch.pdf", width = 6, height = 9)
#
par(mfrow = c(3,2))
for(i in c(1,3,10,11,8,9)) plot(stock.garch.norm, which=i)
#
graphics.off()
library(MASS)
e = residuals(stock.garch.norm, standardize=TRUE)
fitdistr(e,"t")
n = length(e)
grid = (1:n)/(n+1)
pdf("sp500tplotD14.pdf",width=4,height=4)
#
par(mfrow=c(2,1))
plot(stock.garch.norm, which=9)
qqplot(sort(as.numeric(e)), qt(grid,df=4.62),
main="t-plot, df=4.62",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(qt(c(.25,.75),df=4.62)~quantile(e,c(.25,.75))))
#
graphics.off()
################## t-garch#########################################################################################
garch.std=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="std")
stock.garch.t=ugarchfit(data=y1, spec=garch.std)
show(stock.garch.t)
pred=ugarchforecast(stock.garch.t,data=y1, n.ahead=1)
pred
sigma.garch<-sigma(pred)
sigma.garch.fit<-sigma(stock.garch.t)
mean.sigma.garch<-mean(sigma.garch.fit)
median.sigma.garch<-median(sigma.garch.fit)
var.sigma.garch<-var(sigma.garch.fit)
mean.sigma.garch; median.sigma.garch; var.sigma.garch
###########################marginal################################################################################
library(MASS)
fitt = fitdistr(y1,"t")
param = as.numeric(fitt$estimate)
mean = param[1]
df = param[3]
sd = param[2]*sqrt( (df)/(df-2) )
sd;sd.y1;df
#################################################################################################################
model=list(lambda = 0.5, omega = var(y1), alpha = 0.1*var(y1),
beta = 0.1, gamma = 0, rf = 0)
mle = hngarchFit(model = model, x = y1, symmetric = TRUE)
mle
## summary.hngarch -
summary(mle)
## hngarchStats -
# HN-GARCH Moments:
hngarchStats(mle$model)
sigma.hnFit=sqrt(mle$h)
mean.sigma.hn<-mean(sigma.hnFit)
median.sigma.hn<-median(sigma.hnFit)
var.sigma.hn<-var(sigma.hnFit)
mean.sigma.hn; median.sigma.hn; var.sigma.hn
##############nnetar###################################################
y1.abs<-abs(y1-mean(y1))
mean.abs<-mean(y1.abs)
y1.abs<-as.ts(y1.abs)
rho.hat<-mean.abs/sd.y1
nnetar.fit<-nnetar(y1.abs/rho.hat)
sigma.nnetar<-forecast(nnetar.fit, h=1)$mean
sigma.nnetar.fit<-na.omit(nnetar.fit$fitted)
mean.sigma.nnetar<-mean(sigma.nnetar.fit)
median.sigma.nnetar<-median(sigma.nnetar.fit)
var.sigma.nnetar<-var(sigma.nnetar.fit)
mean.sigma.nnetar; median.sigma.nnetar; var.sigma.nnetar
# sigma.nnetar
# sigma.nnetarrho<-forecast(nnetar.fit, h=1)$mean/rho.hat
# sigma.nnetarrho
#pdf("sp500.compareD14.pdf", width=6, height=9)
par(mfrow=c(1,1))
time<-seq(from=1, to =1000, by=1)
plot(time, y1.abs/rho.hat, col="yellow", type="l", ylab=expression(hat(sigma)), main="sp500")
lines(sigma.nnetar.fit, col="green")
lines(sigma.hnFit, col="blue", lwd=2)
abline(h=sd, lty=5, lwd=3,col="red")
lines(time, sigma.garch.fit, col="purple", lwd=2)
T=1000
points(T+1, sigma.nnetar, cex=6, pch="*", col="green")
points(T+1, sigma.garch, cex=4,pch="*", col="purple")
legend("top",c("nnetar", "garch", "marginal", "HN-garch","real"),
lty=c(1,1,5, 1,1),lwd=c(1, 1, 3, 1, 1),pt.cex=0.5, col=c("green","purple","red", "blue","yellow"))
#graphics.off()
summary.garch<-c(mean.sigma.garch, median.sigma.garch, var.sigma.garch)
summary.hn<-c(mean.sigma.hn, median.sigma.garch, var.sigma.hn)
summary.nnetar<-c(mean.sigma.nnetar, median.sigma.nnetar, var.sigma.nnetar)
mean.real<-mean(y1.abs/rho.hat)
median.real<-median(y1.abs/rho.hat)
var.real<-var(y1.abs/rho.hat)
summary.real<-c(mean.real, median.real, var.real)
summary.garch; summary.hn; summary.nnetar; summary.real
rmse.garch<-sqrt(mean((as.ts(sigma.garch.fit)-y1.abs/rho.hat)^2))
rmse.hngarch<-sqrt(mean((sigma.hnFit-y1.abs/rho.hat)^2))
rmse.nnetar<-sqrt(mean(na.omit(nnetar.fit$residuals)^2))
rmse.garch; rmse.hngarch; rmse.nnetar
library(xtable)
table11<-data.frame(summary.garch, summary.hn, summary.nnetar, summary.real)
colnames(table11)<-c("garch", "hngarch", "nnetar", "real")
rownames(table11)<-c("mean", "median", "variance")
xtable(table11,digits=7)
table12<-data.frame(rmse.garch, rmse.hngarch, rmse.nnetar)
colnames(table12)<-c("garch", "hngarch", "nnetar")
xtable(table12, digits=4)
#################################################################################################################
############ moving window##########################################################################################
forecast.nnetar=rep(0, 50)
for(i in 1:50){
k=i-1
T=950+k
train.abs<-abs(y1[i:T]/rho.hat)
train.abs<-as.ts(train.abs)
nnetar.fit<-nnetar(train.abs)
forecast.nnetar[i]<-as.numeric(forecast(nnetar.fit, h=1)$mean)
}
mean.nnetar<-mean(forecast.nnetar)
sigma.nnetar<-sd(forecast.nnetar)
forecast.grach=rep(0, 50)
library(rugarch)
for(i in 1:50){
k=i-1
T=950+k
train<-as.ts(y1[i:T])
garch.std=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="std")
stock.garch.t=ugarchfit(data=train, spec=garch.std)
pred=ugarchforecast(stock.garch.t,data=y1, n.ahead=1)
pred
forecast.grach[i]<-sigma(pred)
}
mean.garch<-mean(forecast.grach)
sigma.garch<-sd(forecast.grach)
mean.nnetar
sigma.nnetar
alpha<-seq(from=0.05, to = 1, by= 0.05)
l<-length(alpha)
lcl.nnetar<-rep(0, length(alpha))
ucl.nnetar<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.nnetar[j]<-mean.nnetar-z*sigma.nnetar/sqrt(50)
ucl.nnetar[j]<-mean.nnetar+z*sigma.nnetar/sqrt(50)
}
lcl.garch<-rep(0, length(alpha))
ucl.garch<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.garch[j]<-mean.garch-z*sigma.garch/sqrt(50)
ucl.garch[j]<-mean.garch+z*sigma.garch/sqrt(50)
}
pdf("SP500D16alphacuts.pdf", width=4, height=5)
plot(lcl.nnetar, alpha, type="l", xlim=c(0.009, 0.0135), col="red")
points(lcl.nnetar, alpha, pch="*", col="red")
lines(ucl.nnetar, alpha, col="blue")
points(ucl.nnetar,alpha, pch="*", col="blue")
# lines(ucl.garch, alpha, col="yellow")
# points(ucl.garch,alpha, pch="*", col="yellow")
# lines(lcl.garch, alpha, col="green")
# points(lcl.garch,alpha, pch="*", col="green")
graphics.off()
rm(list=ls())
local({r <- getOption("repos")
r["CRAN"] <- "http://cran.stat.sfu.ca/"
options(repos=r)})
# Set a vector of strings: package names to use (and install, if necessary)
pkg_list = c('PerformanceAnalytics', 'quantmod', 'rugarch','FinTS','car','moments','fGarch', 'readxl', 'xts', 'MASS', 'forecast', 'tseries', 'xtable', 'ggplot2')
# ensure existing required packages are up to date:
update.packages(ask=FALSE, oldPkgs=pkg_list)
# Install packages if needed
for (pkg in pkg_list)
{
# Try loading the library.
if ( ! library(pkg, logical.return=TRUE, character.only=TRUE) )
{
# If the library cannot be loaded, install it; then load.
install.packages(pkg)
library(pkg, character.only=TRUE)
}
}
library(ggplot2)
library(tseries)
library(rugarch)
library(forecast)
library(xts)
library(fOptions)
data=as.xts(get.hist.quote(instrument = "^gspc",start = "2014-12-08",end = "2018-11-28",quote="AdjClose"))
data<-data$Adjusted
y1=na.omit(diff(log(data)))  ##compute returns
pdf("SP500_abs_return.pdf",width=6,height=5)
time<-length(y1)
time<-seq(1:time)
lwdfact=6
plot(time,abs(y1), type='l', main="gspc")
mod = loess(abs(y1)~time,span=.25)
lines(time, mod$fitted, lwd=lwdfact,col=2)
graphics.off()
y1<-as.ts(y1)
pdf("SP500_acf and pacf.pdf", width=6, height=5)
par(mfrow=c(3, 2))
acf(y1, main="original series")
pacf(y1, main="original series")
y2<-y1^2
acf(y2, main="sequared series")
pacf(y2, main="sequared series")
y1.abs<-abs(y1)
acf(y1.abs, main="abs series")
pacf(y1.abs, main="abs series")
graphics.off()
######################################################################
# mean.abs<-mean(y1.abs)
sd.y1<-sd(y1)
# rho.hat<-mean.abs/sd.y1
#############################################################
################################## fitting rugarch################################################################
garch.norm=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="norm")
stock.garch.norm=ugarchfit(data=y1, spec=garch.norm)
show(stock.garch.norm)
pdf("sp500. norm-garch.pdf", width = 6, height = 9)
#
par(mfrow = c(3,2))
for(i in c(1,3,10,11,8,9)) plot(stock.garch.norm, which=i)
#
graphics.off()
library(MASS)
e = residuals(stock.garch.norm, standardize=TRUE)
fitdistr(e,"t")
n = length(e)
grid = (1:n)/(n+1)
pdf("sp500tplotD14.pdf",width=4,height=4)
#
par(mfrow=c(2,1))
plot(stock.garch.norm, which=9)
qqplot(sort(as.numeric(e)), qt(grid,df=4.62),
main="t-plot, df=4.62",xlab= "Standardized residual quantiles",
ylab="t-quantiles")
abline(   lm(qt(c(.25,.75),df=4.62)~quantile(e,c(.25,.75))))
#
graphics.off()
################## t-garch#########################################################################################
garch.std=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="std")
stock.garch.t=ugarchfit(data=y1, spec=garch.std)
show(stock.garch.t)
pred=ugarchforecast(stock.garch.t,data=y1, n.ahead=1)
pred
sigma.garch<-sigma(pred)
sigma.garch.fit<-sigma(stock.garch.t)
mean.sigma.garch<-mean(sigma.garch.fit)
median.sigma.garch<-median(sigma.garch.fit)
var.sigma.garch<-var(sigma.garch.fit)
mean.sigma.garch; median.sigma.garch; var.sigma.garch
###########################marginal################################################################################
library(MASS)
fitt = fitdistr(y1,"t")
param = as.numeric(fitt$estimate)
mean = param[1]
df = param[3]
sd = param[2]*sqrt( (df)/(df-2) )
sd;sd.y1;df
#################################################################################################################
model=list(lambda = 0.5, omega = var(y1), alpha = 0.1*var(y1),
beta = 0.1, gamma = 0, rf = 0)
mle = hngarchFit(model = model, x = y1, symmetric = TRUE)
mle
## summary.hngarch -
summary(mle)
## hngarchStats -
# HN-GARCH Moments:
hngarchStats(mle$model)
sigma.hnFit=sqrt(mle$h)
mean.sigma.hn<-mean(sigma.hnFit)
median.sigma.hn<-median(sigma.hnFit)
var.sigma.hn<-var(sigma.hnFit)
mean.sigma.hn; median.sigma.hn; var.sigma.hn
##############nnetar###################################################
y1.abs<-abs(y1-mean(y1))
mean.abs<-mean(y1.abs)
y1.abs<-as.ts(y1.abs)
rho.hat<-mean.abs/sd.y1
nnetar.fit<-nnetar(y1.abs/rho.hat)
sigma.nnetar<-forecast(nnetar.fit, h=1)$mean
sigma.nnetar.fit<-na.omit(nnetar.fit$fitted)
mean.sigma.nnetar<-mean(sigma.nnetar.fit)
median.sigma.nnetar<-median(sigma.nnetar.fit)
var.sigma.nnetar<-var(sigma.nnetar.fit)
mean.sigma.nnetar; median.sigma.nnetar; var.sigma.nnetar
# sigma.nnetar
# sigma.nnetarrho<-forecast(nnetar.fit, h=1)$mean/rho.hat
# sigma.nnetarrho
#pdf("sp500.compareD14.pdf", width=6, height=9)
par(mfrow=c(1,1))
time<-seq(from=1, to =1000, by=1)
plot(time, y1.abs/rho.hat, col="yellow", type="l", ylab=expression(hat(sigma)), main="sp500")
lines(sigma.nnetar.fit, col="green")
lines(sigma.hnFit, col="blue", lwd=2)
abline(h=sd, lty=5, lwd=3,col="red")
lines(time, sigma.garch.fit, col="purple", lwd=2)
T=1000
points(T+1, sigma.nnetar, cex=6, pch="*", col="green")
points(T+1, sigma.garch, cex=4,pch="*", col="purple")
legend("top",c("nnetar", "garch", "marginal", "HN-garch","real"),
lty=c(1,1,5, 1,1),lwd=c(1, 1, 3, 1, 1),pt.cex=0.5, col=c("green","purple","red", "blue","yellow"))
#graphics.off()
summary.garch<-c(mean.sigma.garch, median.sigma.garch, var.sigma.garch)
summary.hn<-c(mean.sigma.hn, median.sigma.garch, var.sigma.hn)
summary.nnetar<-c(mean.sigma.nnetar, median.sigma.nnetar, var.sigma.nnetar)
mean.real<-mean(y1.abs/rho.hat)
median.real<-median(y1.abs/rho.hat)
var.real<-var(y1.abs/rho.hat)
summary.real<-c(mean.real, median.real, var.real)
summary.garch; summary.hn; summary.nnetar; summary.real
rmse.garch<-sqrt(mean((as.ts(sigma.garch.fit)-y1.abs/rho.hat)^2))
rmse.hngarch<-sqrt(mean((sigma.hnFit-y1.abs/rho.hat)^2))
rmse.nnetar<-sqrt(mean(na.omit(nnetar.fit$residuals)^2))
rmse.garch; rmse.hngarch; rmse.nnetar
library(xtable)
table11<-data.frame(summary.garch, summary.hn, summary.nnetar, summary.real)
colnames(table11)<-c("garch", "hngarch", "nnetar", "real")
rownames(table11)<-c("mean", "median", "variance")
xtable(table11,digits=7)
table12<-data.frame(rmse.garch, rmse.hngarch, rmse.nnetar)
colnames(table12)<-c("garch", "hngarch", "nnetar")
xtable(table12, digits=4)
#################################################################################################################
############ moving window##########################################################################################
forecast.nnetar=rep(0, 50)
for(i in 1:50){
k=i-1
T=950+k
train.abs<-abs(y1[i:T]/rho.hat)
train.abs<-as.ts(train.abs)
nnetar.fit<-nnetar(train.abs)
forecast.nnetar[i]<-as.numeric(forecast(nnetar.fit, h=1)$mean)
}
mean.nnetar<-mean(forecast.nnetar)
sigma.nnetar<-sd(forecast.nnetar)
forecast.grach=rep(0, 50)
library(rugarch)
for(i in 1:50){
k=i-1
T=950+k
train<-as.ts(y1[i:T])
garch.std=ugarchspec(mean.model = list(armaOrder=c(0,0)),
variance.model=list(garchOrder=c(1,1)), distribution="std")
stock.garch.t=ugarchfit(data=train, spec=garch.std)
pred=ugarchforecast(stock.garch.t,data=y1, n.ahead=1)
pred
forecast.grach[i]<-sigma(pred)
}
mean.garch<-mean(forecast.grach)
sigma.garch<-sd(forecast.grach)
mean.nnetar
sigma.nnetar
alpha<-seq(from=0.05, to = 1, by= 0.05)
l<-length(alpha)
lcl.nnetar<-rep(0, length(alpha))
ucl.nnetar<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.nnetar[j]<-mean.nnetar-z*sigma.nnetar/sqrt(50)
ucl.nnetar[j]<-mean.nnetar+z*sigma.nnetar/sqrt(50)
}
lcl.garch<-rep(0, length(alpha))
ucl.garch<-rep(0, length(alpha))
for(j in 1:l){
z<-qnorm(1-alpha[j]/2, mean=0, sd=1)
lcl.garch[j]<-mean.garch-z*sigma.garch/sqrt(50)
ucl.garch[j]<-mean.garch+z*sigma.garch/sqrt(50)
}
pdf("SP500D16alphacuts.pdf", width=4, height=5)
plot(lcl.nnetar, alpha, type="l", xlim=c(0.009, 0.0135), col="red")
points(lcl.nnetar, alpha, pch="*", col="red")
lines(ucl.nnetar, alpha, col="blue")
points(ucl.nnetar,alpha, pch="*", col="blue")
# lines(ucl.garch, alpha, col="yellow")
# points(ucl.garch,alpha, pch="*", col="yellow")
# lines(lcl.garch, alpha, col="green")
# points(lcl.garch,alpha, pch="*", col="green")
graphics.off()
library(fOptions)
library(tseries)
library(ggplot2)
library(xts)
y1=as.xts(get.hist.quote(instrument = "aapl",start = "2014-12-09",end = "2018-11-28",quote="AdjClose"))
y1<-y1$Adjusted
ret=na.omit(diff(log(y1)))  ##compute returns
sd(ret)
plot(ret, main="heloo")
y1=as.xts(get.hist.quote(instrument = "aapl",start = "2007-06-30",end = "2018-06-30",quote="AdjClose"))
y1<-y1$Adjusted
ret=na.omit(diff(log(y1)))  ##compute returns
sd(ret)
plot(ret, main="heloo")
y1=as.xts(get.hist.quote(instrument = "aapl",start = "2007-06-30",end = "2018-06-30",quote="AdjClose"))
y1<-y1$Adjusted
ret=na.omit(diff(log(y1)))  ##compute returns
sd(ret)
plot(ret)
y1=as.xts(get.hist.quote(instrument = "aapl",start = "2007-06-30",end = "2018-06-30",quote="AdjClose"))
y1<-y1$Adjusted
ret=na.omit(diff(log(y1)))  ##compute returns
sd(ret)
plot(ret, main="")
plot(y1, main="")
